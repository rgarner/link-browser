// Generated by CoffeeScript 1.3.3
(function() {
  var $b, LinkEnumerator;

  $b = DOMBrew;

  LinkEnumerator = (function() {

    function LinkEnumerator() {}

    LinkEnumerator.addLink = function(root, linkTag) {
      var _class;
      _class = linkTag.rel === 'alternate' ? 'alternate' : null;
      return $b(root).append($b('tr', {
        "class": _class
      }).append($b('td', linkTag.rel)).append($b('td').append($b('a', {
        href: linkTag.href,
        title: linkTag.href,
        text: linkTag.href
      }))).append($b('td', {
        "class": 'type',
        text: linkTag.type
      })).append($b('td', linkTag.media)));
    };

    LinkEnumerator.addListOfLinks = function() {
      return chrome.tabs.getSelected(null, function(tab) {
        return chrome.tabs.sendMessage(tab.id, {
          askFor: 'links'
        }, function(linkTags) {
          var linkTag, root, td, _i, _len, _results;
          root = document.getElementById('links');
          if (linkTags == null) {
            td = $b(root).append($b('tr').append($b('td', 'No link tags found.')));
            return;
          }
          linkTags.sort(function(a, b) {
            if (a.rel === b.rel) {
              return 0;
            }
            if (a.rel === 'alternate') {
              return -1;
            }
            if (a.rel >= b.rel) {
              return 1;
            } else {
              return -1;
            }
          });
          _results = [];
          for (_i = 0, _len = linkTags.length; _i < _len; _i++) {
            linkTag = linkTags[_i];
            _results.push(LinkEnumerator.addLink(root, linkTag));
          }
          return _results;
        });
      });
    };

    return LinkEnumerator;

  })();

  document.addEventListener('DOMContentLoaded', function() {
    return LinkEnumerator.addListOfLinks();
  });

}).call(this);
